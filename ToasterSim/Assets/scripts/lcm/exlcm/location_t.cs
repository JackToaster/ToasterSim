/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;

namespace exlcm
{
	public sealed class position_t : LCM.LCM.LCMEncodable
	{
		public float xPosition;
		public float yPosition;
		public float angle;
		public double relativeTime;

		public position_t()
		{
		}

		public static readonly ulong LCM_FINGERPRINT;
		public static readonly ulong LCM_FINGERPRINT_BASE = 0xcd5ed33800c1b868L;

		static position_t()
		{
			LCM_FINGERPRINT = _hashRecursive(new List<String>());
		}

		public static ulong _hashRecursive(List<String> classes)
		{
			if (classes.Contains("exlcm.position_t"))
				return 0L;

			classes.Add("exlcm.position_t");
			ulong hash = LCM_FINGERPRINT_BASE
				;
			classes.RemoveAt(classes.Count - 1);
			return (hash<<1) + ((hash>>63)&1);
		}

		public void Encode(LCMDataOutputStream outs)
		{
			outs.Write((long) LCM_FINGERPRINT);
			_encodeRecursive(outs);
		}

		public void _encodeRecursive(LCMDataOutputStream outs)
		{
			outs.Write(this.xPosition);

			outs.Write(this.yPosition);

			outs.Write(this.angle);

			outs.Write(this.relativeTime);

		}

		public position_t(byte[] data) : this(new LCMDataInputStream(data))
		{
		}

		public position_t(LCMDataInputStream ins)
		{
			if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
				throw new System.IO.IOException("LCM Decode error: bad fingerprint");

			_decodeRecursive(ins);
		}

		public static exlcm.position_t _decodeRecursiveFactory(LCMDataInputStream ins)
		{
			exlcm.position_t o = new exlcm.position_t();
			o._decodeRecursive(ins);
			return o;
		}

		public void _decodeRecursive(LCMDataInputStream ins)
		{
			this.xPosition = ins.ReadSingle();

			this.yPosition = ins.ReadSingle();

			this.angle = ins.ReadSingle();

			this.relativeTime = ins.ReadDouble();

		}

		public exlcm.position_t Copy()
		{
			exlcm.position_t outobj = new exlcm.position_t();
			outobj.xPosition = this.xPosition;

			outobj.yPosition = this.yPosition;

			outobj.angle = this.angle;

			outobj.relativeTime = this.relativeTime;

			return outobj;
		}
	}
}
